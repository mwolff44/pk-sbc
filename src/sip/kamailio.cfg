#!KAMAILIO
#
# Kamailio SIP Server v5.7 - P-KISS-SBC
# Version : 4.2.0
#

####### Include Local Config If Exists #########
import_file "kamailio-local.cfg"

# Default Values
# ==============

#!ifdef WITH_MYSQL
  #!ifndef DB_URL
    #!trydef DB_URL "mysql://kamailio:kamailiorw@localhost/kamailio"
  #!endif
#!endif

#!ifdef WITH_SQLITE
  #!ifndef DB_URL
    #!trydef DB_URL "sqlite:///etc/kamailio/kamailio.db"
  #!endif
#!endif

#!ifdef WITH_PGSQL
  #!ifndef DB_URL
    #!trydef DB_URL "postgres://kamailio:password@localhost/kamailio"
  #!endif
#!endif

#!ifndef DB_URL
  #!define DB_URL "text:///etc/kamailio/db"
#!endif

#!ifndef RTPENGINE_LIST
  #!define RTPENGINE_LIST "udp:localhost:22222=1"
#!endif

#!ifndef REDIS
  #!define REDIS "name=srv8;addr=localhost;port=6379;db=8"
#!endif

#!substdef "!HTTP_PORT!8091!g"
#!define LISTEN_XHTTP tcp:lo:HTTP_PORT
listen=LISTEN_XHTTP

#!ifndef DISPATCHER_ALG
  #!define DISPATCHER_ALG "0"
#!endif

#!ifndef MY_SIP_PORT_INTERNAL
  #!define MY_SIP_PORT_INTERNAL 5070
#!endif

#!ifndef MY_SIP_PORT_EXTERNAL
  #!define MY_SIP_PORT_EXTERNAL 5060
#!endif


#!ifndef LISTEN_PUBLIC
  #!define LISTEN_PUBLIC eth0:5060
#!endif

#!ifndef LISTEN_PRIVATE
  #!define LISTEN_PRIVATE eth0:5070
#!endif

listen=udp:LISTEN_PRIVATE name "private"

#!ifdef LISTEN_ADVERTISE
  listen=udp:LISTEN_PUBLIC advertise LISTEN_ADVERTISE name "public"
#!else
  listen=udp:LISTEN_PUBLIC name "public"
#!endif

#!ifndef PROBING_MODE
  #!define PROBING_MODE 1
#!endif


####### Defined Values #########

# *** Value defines - IDs used later in config
#!ifdef WITH_DEBUG
#!define DBGLEVEL 4
#!else
#!define DBGLEVEL 2
#!endif

#!define MULTIDOMAIN 0

#!ifdef WITH_ANTIFLOOD
# - hash table 'ipban' used to store blocked IP addresses
#!trydef WITH_HTABLE
#!endif

# - flags
#   FLT_ - per transaction (message) flags
#!define FLT_ACC 1
#!define FLT_ACCMISSED 2
#!define FLT_ACCFAILED 3
#!define FLT_NATS 5

#	FLB_ - per branch flags
#!define FLB_NATB 6
#!define FLB_NATSIPPING 7

# permissions group definition
#!define TRUSTED_ADR_GR_CUST 1
#!define TRUSTED_ADR_GR_PROV 2

flags
  FLAG_FROM_CUST: 10,
  FLAG_FROM_PROV: 11,
  FLAG_TRUSTED_SOURCE: 12;


####### Global Parameters #########

/* LOG Levels: 3=DBG, 2=INFO, 1=NOTICE, 0=WARN, -1=ERR, ... */
debug=DBGLEVEL

/* set to 'yes' to print log messages to terminal or use '-E' cli option */
log_stderror=no

memdbg=5
memlog=5

log_facility=LOG_LOCAL0
log_prefix="{$mt $hdr(CSeq) $ci} "

/* number of SIP routing processes for each UDP socket
 * - value inherited by tcp_children and sctp_children when not set explicitely */
children=8

/* number of SIP routing processes for all TCP/TLS sockets */
#tcp_children=8

/* uncomment the next line to disable the auto discovery of local aliases
 * based on reverse DNS on IPs (default on) */
#auto_aliases=no

/* life time of TCP connection when there is no traffic
 * - a bit higher than registration expires to cope with UA behind NAT */
tcp_connection_lifetime=3605

/* upper limit for TCP connections (it includes the TLS connections) */
tcp_max_connections=2048

tcp_accept_no_cl=yes

/* set it to yes to enable sctp and load sctp.so module */
enable_sctp=no

####### Custom Parameters #########

/* These parameters can be modified runtime via RPC interface
 * - see the documentation of 'cfg_rpc' module.
 *
 * Format: group.id = value 'desc' description
 * Access: $sel(cfg_get.group.id) or @cfg_get.group.id */


####### Modules Section ########

/* set paths to location of modules */
# mpath="/usr/local/lib/kamailio/modules/"

loadmodule "sl.so"
loadmodule "pv.so"
loadmodule "xhttp.so"
loadmodule "jsonrpcs.so"
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "rr.so"
loadmodule "maxfwd.so"
loadmodule "textops.so"
loadmodule "textopsx.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "acc.so"
loadmodule "counters.so"

#!ifdef WITH_DBTEXT
loadmodule "db_text.so"
#!endif

#!ifdef WITH_MYSQL
loadmodule "db_mysql.so"
#!endif

#!ifdef WITH_SQLITE
loadmodule "db_sqlite.so"
#!endif

#!ifdef WITH_PGSQL
loadmodule "db_postgres.so"
#!endif

loadmodule "permissions.so"
loadmodule "dialplan.so"
loadmodule "nathelper.so"
#loadmodule "dialog.so"
loadmodule "ndb_redis.so"
loadmodule "topos.so"
loadmodule "topos_redis.so"
loadmodule "dispatcher.so"
loadmodule "rtpengine.so"
loadmodule "htable.so"

#!ifdef WITH_ANTIFLOOD
loadmodule "pike.so"
#!endif

#!ifdef WITH_DEBUG
loadmodule "debugger.so"
#!endif

# ----------------- setting module-specific parameters ---------------


# ----- jsonrpcs params -----
modparam("jsonrpcs", "pretty_format", 1)
/* set the path to RPC fifo control file */
modparam("jsonrpcs", "fifo_name", "/run/kamailio/kamailio_rpc.fifo")
/* set the path to RPC unix socket control file */
# modparam("jsonrpcs", "dgram_socket", "/run/kamailio/kamailio_rpc.sock")
modparam("jsonrpcs", "transport", 1)

# ----- ctl params -----
/* set the path to RPC unix socket control file */
# modparam("ctl", "binrpc", "unix:/run/kamailio/kamailio_ctl")

# ----- sanity params -----
modparam("sanity", "autodrop", 0)

# ----- tm params -----
# auto-discard branches from previous serial forking leg
modparam("tm", "failure_reply_mode", 3)
# default retransmission timeout: 30sec
modparam("tm", "fr_timer", 30000)
# default invite retransmission timeout after 1xx: 120sec
modparam("tm", "fr_inv_timer", 120000)

# ----- rr params -----
# set next param to 1 to add value to ;lr param (helps with some UAs)
modparam("rr", "enable_full_lr", 1)
# do not append from tag to the RR (no need for this script)
modparam("rr", "append_fromtag", 0)

# ----- acc params -----
modparam("acc", "early_media", 1)
modparam("acc", "report_ack", 1)
modparam("acc", "report_cancels", 1)
modparam("acc", "detect_direction", 0)
modparam("acc", "db_insert_mode", 2)
modparam("acc", "db_url", DB_URL)
modparam("acc", "db_flag", FLT_ACC)
modparam("acc", "db_missed_flag", FLT_ACCMISSED)
modparam("acc", "failed_transaction_flag", FLT_ACCFAILED)
modparam("acc", "acc_extra_nullable", 1)
modparam("acc", "multi_leg_info", "leg_src=$avp(src);leg_dst=$avp(dst)")
modparam("acc", "db_extra", "user_agent=$hdr(User-Agent)")

# ----- db_text params -----
#!ifdef WITH_DBTEXT
modparam("db_text", "db_mode", 1)
modparam("db_text", "db_delim", "|")
#!endif

# ----- permissions params -----
modparam("permissions", "db_url", DB_URL)
modparam("permissions", "load_backends", 1)
modparam("permissions", "peer_tag_avp", "$avp(i:707)")

# ----- nathelper params -----
#modparam("nathelper", "natping_interval", 30)
#modparam("nathelper", "ping_nated_only", 1)
#modparam("nathelper", "sipping_bflag", FLB_NATSIPPING)
#modparam("nathelper", "sipping_from", "sip:pinger@kamailio.org")

# params needed for NAT traversal in other modules
#modparam("nathelper", "received_avp", "$avp(RECEIVED)")

#!ifdef WITH_ANTIFLOOD
# ----- pike params -----
modparam("pike", "sampling_time_unit", 2)
modparam("pike", "reqs_density_per_unit", 16)
modparam("pike", "remove_latency", 4)

# ----- htable params -----
/* ip ban htable with autoexpire after 5 minutes */
modparam("htable", "htable", "ipban=>size=8;autoexpire=300;")
#!endif
modparam("htable", "db_url", DB_URL)
modparam("htable", "htable", "tenantmap=>size=9;autoexpire=0;dbtable=tenant;")

# ----- dialplan params -----
modparam("dialplan", "db_url", DB_URL)
modparam("dialplan", "attrs_pvar", "$avp(s:dest)")
modparam("dialplan", "reload_delta", 60)

# ----- topo -----
modparam("ndb_redis", "server", REDIS)
modparam("topos", "storage", "redis")
modparam("topos_redis", "serverid", "srv8")

# ----- dispatcher params -----
modparam("dispatcher", "db_url", DB_URL)
modparam("dispatcher", "flags", 2)
modparam("dispatcher", "xavp_dst", "_dsdst_")
modparam("dispatcher", "xavp_ctx", "_dsctx_")
modparam("dispatcher", "attrs_pvname", "$var(attrs)")
modparam("dispatcher", "ds_ping_from", "PING_FROM")
modparam("dispatcher", "ds_ping_interval", 5)
modparam("dispatcher", "ds_probing_threshold", 5)
modparam("dispatcher", "ds_inactive_threshold", 5)
modparam("dispatcher", "ds_ping_reply_codes", "class=2;code=401;code=403;code=488;class=3")
modparam("dispatcher", "ds_probing_mode", PROBING_MODE)
modparam("dispatcher", "ds_ping_latency_stats", 1)
modparam("dispatcher", "ds_attrs_none", 1)
modparam("dispatcher", "ds_dns_mode", 4)
modparam("dispatcher", "ds_default_sockname", "public")

# ----- rtpengine params -----
modparam("rtpengine", "rtpengine_sock", RTPENGINE_LIST)
modparam("rtpengine", "mos_average_pv", "$avp(mos_average)")

# ----- xhttp params -----
modparam("xhttp", "url_skip", "^/RPC2")

#!ifdef WITH_DEBUG
# ----- debugger params -----
modparam("debugger", "cfgtrace", 1)
modparam("debugger", "log_level_name", "exec")
#!endif

####### Routing Logic ########


/* Main SIP request routing logic
 * - processing of any incoming SIP request starts with this route
 * - note: this is the same as route { ... } */
request_route {
	xinfo("Request route\n");

	# log the basic info regarding this call
    xinfo("start|\n");
    xinfo("===================================================\n");
    xinfo(" New SIP message $rm with call-ID $ci \n");
    xinfo("---------------------------------------------------\n");
    xinfo(" received $pr request $rm $ou\n");
    xinfo(" source $si:$sp\n");
    xinfo(" from $fu\n");
    xinfo(" to $tu\n");
    xinfo("---------------------------------------------------\n");
    xinfo("---------------------------------------------------\n");


	# per request initial checks
	route(REQINIT);

	# NAT detection
	route(NATDETECT);

	# OPTION processing
    if(is_method("OPTIONS") && uri==myself) {
        sl_send_reply("200","Keepalive");
        xinfo(" Send SIP answer 200-OK - Keepalive\n");
        xinfo("stop|=================================================\n");
        exit;
    }


	# CANCEL processing
	if (is_method("CANCEL")) {
		xinfo("  $rm from $si\n");
		if (t_check_trans()) {
			route(RELAY);
		}
		xwarn("  $rm from $si is not from a known transaction, drop\n");
		exit;
	}

	# handle retransmissions
	if (!is_method("ACK")) {
		if(t_precheck_trans()) {
			t_check_trans();
			exit;
		}
		t_check_trans();
	}

	# handle requests within SIP dialogs
	route(WITHINDLG);

	### only initial requests (no To tag)


	# authentication
	route(AUTH);

	# record routing for dialog forming requests (in case they are routed)
	# - remove preloaded route headers
	remove_hf("Route");
	if (is_method("INVITE|SUBSCRIBE")) {
		record_route();
	}

	# account only INVITEs
	if (is_method("INVITE")) {
		setflag(FLT_ACC); # do accounting
	}

    # handle presence related requests
	route(PRESENCE);

	if ($rU==$null) {
		# request with no Username in RURI
		sl_send_reply("484","Address Incomplete");
		exit;
	}

	# dispatch destinations
	route(DISPATCH);

	return;
}

# Wrapper for relaying requests
route[RELAY] {
	xinfo("route RELAY\n");

	# enable additional event routes for forwarded requests
	# - serial forking, RTP relaying handling, a.s.o.
	if (is_method("INVITE|BYE|UPDATE")) {
		if(!t_is_set("branch_route")) t_on_branch("MANAGE_BRANCH");
	}
	if (is_method("INVITE|UPDATE")) {
		if(!t_is_set("onreply_route")) t_on_reply("MANAGE_REPLY");
	}
	if (is_method("INVITE")) {
		if(!t_is_set("failure_route")) t_on_failure("MANAGE_FAILURE");
	}


	if (!t_relay()) {
		sl_reply_error();
	}
	exit;
}

# Per SIP request initial checks
route[REQINIT] {
	xinfo("route REQINIT\n");
	# no connect for sending replies
	set_reply_no_connect();
	# enforce symmetric signaling
	# - send back replies to the source address of request
	force_rport();

#!ifdef WITH_ANTIFLOOD
	# flood detection from same IP and traffic ban for a while
	# be sure you exclude checking trusted peers, such as pstn gateways
	# - local host excluded (e.g., loop to self)
	if(src_ip!=myself) {
		if($sht(ipban=>$si)!=$null) {
			# ip is already blocked
			xdbg("request from blocked IP - $rm from $fu (IP:$si:$sp)\n");
			exit;
		}
		if (!pike_check_req()) {
			xlog("L_ALERT","ALERT | pike blocking $rm from $fu (IP:$si:$sp)\n");
			$sht(ipban=>$si) = 1;
			exit;
		}
	}
#!endif
	if($ua =~ "friendly|scanner|sipcli|sipvicious|VaxSIPUserAgent|pplsip") {
		# silent drop for scanners - uncomment next line if want to reply
		# sl_send_reply("200", "OK");
		exit;
	}

	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if(is_method("OPTIONS") && uri==myself && $rU==$null) {
		sl_send_reply("200","Keepalive");
		exit;
	}

	if(!sanity_check("32767", "15")) {
		# TODO : add a settings to adapt the mode
		# By default  the sanity_check function is run with the strictest mode 
		#   for both msg_checks and uri_checks by switching on all possible restraints
		xlog("Malformed SIP request from $si:$sp\n");
		exit;
	}
}

# Handle requests within SIP dialogs
route[WITHINDLG] {
	xinfo("route WITHINDLG\n");
	if (!has_totag()) return;

	# sequential request withing a dialog should
	# take the path determined by record-routing
	if (loose_route()) {
		route(DLGURI);
		if (is_method("BYE")) {
			setflag(FLT_ACC); # do accounting ...
			setflag(FLT_ACCFAILED); # ... even if the transaction fails
		} else if ( is_method("ACK|INVITE|UPDATE") ) {
			# ACK is forwarded statelessly and UPDATE will be used to update the SDP INVITE in dialog
			if (is_method("INVITE|UPDATE")) {
      	        route(RTPE);
			}
			route(NATMANAGE);
		} else if ( is_method("NOTIFY") ) {
			# Add Record-Route for in-dialog NOTIFY as per RFC 6665.
			record_route();
		}
		route(RELAY);
		exit;
	}

	if ( is_method("ACK") ) {
		if ( t_check_trans() ) {
			# no loose-route, but stateful ACK;
			# must be an ACK after a 487
			# or e.g. 404 from upstream server
			route(RELAY);
			exit;
		} else {
			# ACK without matching transaction ... ignore and discard
			exit;
		}
	}
	sl_send_reply("404","Not here");
	exit;
}

# IP authorization and user authentication
route[AUTH] {
	xinfo("route AUTH\n");
	xinfo(" Starting auth process ...\n");

    xinfo(" P Auth process ...\n");

    if(route(MSG_RECV_INTERNAL)) {
		xinfo(" => Request from INTERNAL interface\n");
	}

    if(route(MSG_RECV_EXTERNAL)) {
		xinfo(" => Request from EXTERNAL interface\n");
	}


	if(!is_method("REGISTER")) {
		$var(group) = allow_source_address_group();
		switch ($var(group)) {
			case -1:
			    xlog("L_ALERT","ALERT | Request from unknown GW (IP:$si:$sp)\n");
				exit;
			case 1:
                setflag(FLAG_FROM_CUST);
		        xlog("L_INFO", "INFO | Call from IPBX/customer - GW_ID : $avp(i:707) - Source IP ($si:$sp) allowed\n");
				if ($avp(i:707) == 0) {
					route(TENANTAUTH);
				}
		        return;
            case 2:
                setflag(FLAG_FROM_PROV);
		        xlog("L_INFO", "Call from provider - GW_ID : $avp(i:707) - Source IP ($si:$sp)\n");
				if ($avp(i:707) == 0) {
					route(TENANTAUTH);
				}
		        return;
		}
	}

	# authentication not enabled - do not relay at all to foreign networks
	if(uri!=myself) {
		xlog("L_ALERT","ALERT | Request from unknown GW to foreign networks (IP:$si:$sp)\n");
		sl_send_reply("403","Not relaying");
		exit;
	}
    xlog("L_ALERT","ALERT | Request from unknown GW (IP:$si:$sp)\n");
	exit;
}

# Check X-Tenant
route[TENANTAUTH] {
	xinfo("route TENANTAUTH\n");
	if(!is_present_hf("X-Tenant")) {
		if (!is_present_hf("X-CUSTOMER-ID")) {
			xlog("L_ALERT","ALERT | Request from known GW but without good tenant info (IP:$si:$sp)\n");
		    sl_send_reply("404", "Tenant not found");
			exit;
		}
	    $var(tenantheader) = $(hdr(X-CUSTOMER-ID){s.trim});
	} else {
	    $var(tenantheader) = $(hdr(X-Tenant){s.trim});
	}

	if($sht(tenantmap=>$var(tenantheader)) == $null) {
		sl_send_reply("404", "No tenant found");
		exit;
	}
	$var(tenant) = $sht(tenantmap=>$var(tenantheader));

	xlog("L_INFO", "Call from IP auth peer with tenant $var(tenant) - GW_ID : $avp(i:707) - Source IP ($si:$sp)\n");

	#remove_hf("X-Tenant");
	xinfo("remove SIP X- headers\n");
	remove_hf_re("X-");
	return;
}

# Caller NAT detection
route[NATDETECT] {
	xinfo("route NATDETECT\n");
	if (nat_uac_test("19")) {
        if(is_first_hop()) {
            set_contact_alias();
        }
		setflag(FLT_NATS);
	}
	return;
}

# Signaling updates for NAT traversal
route[NATMANAGE] {
	xinfo("route NATMANAGE\n");
	if (is_request()) {
		if(has_totag()) {
			if(check_route_param("nat=yes")) {
				setbflag(FLB_NATB);
			}
		}
	}
	if (!(isflagset(FLT_NATS) || isbflagset(FLB_NATB))) return;

	if (is_request()) {
		if (!has_totag()) {
			if(t_is_branch_route()) {
				add_rr_param(";nat=yes");
			}
		}
	}
	if (is_reply()) {
		if(isbflagset(FLB_NATB)) {
			if(is_first_hop())
				set_contact_alias();
		}
	}

	if(isbflagset(FLB_NATB)) {
		# no connect message in a dialog involving NAT traversal
		if (is_request()) {
			if(has_totag()) {
				set_forward_no_connect();
			}
		}
	}
	return;
}

# URI update for dialog requests
route[DLGURI] {
	xinfo("route DLGURI\n");
#!ifdef WITH_NAT
	if(!isdsturiset()) {
		handle_ruri_alias();
	}
#!endif
	return;
}


# Presence server route
route[PRESENCE] {
	if(!is_method("PUBLISH|SUBSCRIBE"))
		return;

	sl_send_reply("404", "Not here");
	exit;
}

# Dispatch requests
route[DISPATCH] {
	xinfo("route dispatch\n");
	# select the GW list from $rU
	if(isflagset(FLAG_FROM_CUST)) {
        $fsn = "public";
		# first, check if the R-URI matches a rule in internal topic (3)
		# second, if no internal match, then check if the R_URI matches a rule in external topic (2)
		$var(rule3) = dp_match("3", "$rU");
		switch ($var(rule3)) {
			case -2:
			    xinfo("INFO | No internal routing rule found for GW (IP:$si:$sp) associated with '$rU'\n");
			case -1:
			    xerr("ALERT | Error finding internal routing rule for GW (IP:$si:$sp) associated with '$rU'\n");
			case 1:
                xinfo("INFO | The internal routing rule for GW (IP:$si:$sp) associated with '$rU' are '$avp(s:dest)'\n");
		}
		if (!$avp(s:dest)) {
			$var(rule2) = dp_match("2", "$rU");
			switch ($var(rule2)) {
				case -2:
					xwarn("INFO | No external routing rule found for GW (IP:$si:$sp) associated with '$rU'\n");
				case -1:
					xerr("ALERT | Error finding external routing rule for GW (IP:$si:$sp) associated with '$rU'\n");
				case 1:
					xinfo("INFO | The external routing rule for GW (IP:$si:$sp) associated with '$rU' are '$avp(s:dest)'\n");
			}
		}
    } else if(isflagset(FLAG_FROM_PROV)) {
        $fsn = "private";
		$var(rule1) = dp_match("1", "$rU");
		switch ($var(rule1)) {
			case -2:
			    xwarn("INFO | No DID routing rule found for GW (IP:$si:$sp) associated with '$rU'\n");
			case -1:
			    xerr("ALERT | Error finding DID routing rule for GW (IP:$si:$sp) associated with '$rU'\n");
			case 1:
                xinfo("INFO | The DID routing rule for GW (IP:$si:$sp) associated with '$rU' are '$avp(s:dest)'\n");
		}
	} else {
		xwarn("WARN | No routing rule found for GW (IP:$si:$sp)\n");
		send_reply("404", "No destination");
		exit;
	}

	if (!$avp(s:dest)) {
		xwarn("WARN | No routing rule found for GW (IP:$si:$sp)\n");
		send_reply("404", "No destination");
		exit;
	}

	if (has_body("application/sdp")) {

		if (route(MSG_RECV_INTERNAL)) {
			xinfo("rtpe offer from internal\n");
			# TODO : do not handle SDP with RFC1918 IP - need to compare with SIP source IP
			if (rtpengine_offer("replace-origin replace-session-connection direction=internal direction=external")) {
				t_on_reply("1");
			}
		} else {
			xinfo("rtpe offer from external\n");
			if (rtpengine_offer("replace-origin replace-session-connection direction=external direction=internal")) {
				t_on_reply("1");
			}
		}
	} else {
		t_on_reply("2");
	} 
   

	# round robin dispatching on gateways group '1'
	if(!ds_select_domain("$avp(s:dest)", "4")) {
		xlog("L_WARN","WARN | No gateway found for GW id $avp(s:dest)\n");
		send_reply("404", "No destination");
		exit;
	}
	xlog("L_DEBUG", "--- SCRIPT: going to <$ru> via <$du> (attrs: $xavp(_dsdst_=>attrs))\n");
	t_on_failure("RTF_DISPATCH");

	if (is_method("ACK") && has_body("application/sdp")) {
            if (route(MSG_RECV_INTERNAL)) {
				xinfo("rtpe answer ACK from internal\n");
                rtpengine_answer("replace-origin replace-session-connection direction=internal direction=external");
            } else {
				xinfo("rtpe answer ACK from external\n");
                rtpengine_answer("replace-origin replace-session-connection direction=external direction=internal");
            }
	}

    if ($(xavp(_dsdst_=>attrs){param.value,tenant}) != "none") {
	    append_hf_value("X-Tenant", "$(xavp(_dsdst_=>attrs){param.value,tenant})");
		append_hf_value("X-CUSTOMER-ID", "$(xavp(_dsdst_=>attrs){param.value,tenant})");
	}

    route(RELAY);

	exit;
}

# JSONRPC over HTTP(S) routing
#!ifdef WITH_JSONRPC
event_route[xhttp:request] {
	set_reply_close();
	set_reply_no_connect();
	if(src_ip!=127.0.0.1) {
		xhttp_reply("403", "Forbidden", "text/html",
				"<html><body>Not allowed from $si</body></html>");
		exit;
	}
	if ($hu =~ "^/RPC") {
		jsonrpc_dispatch();
		exit;
	}

	xhttp_reply("200", "OK", "text/html",
				"<html><body>Wrong URL $hu</body></html>");
    exit;
}
#!endif

# Manage outgoing branches
branch_route[MANAGE_BRANCH] {
	xinfo("branch route MANAGE_BRANCH\n");
	xinfo("new branch [$T_branch_idx] to $ru\n");
	route(NATMANAGE);
	return;
}

# Manage incoming replies
reply_route {
	xinfo("reply route\n");
	xinfo("-- Response: '$rs $rr' to '$cs $rm' from '$fu' ($si:$sp) [$proto]\n");
	if(!sanity_check("17604", "6")) {
		xwarn("Malformed SIP response from $si:$sp\n");
		drop;
	}

	return;
}

# Manage incoming replies in transaction context
onreply_route[MANAGE_REPLY] {
	xinfo("onreply route MANAGE_REPLY - incoming reply\n");
    xinfo("DEBUG | Incoming reply $rs from socket $Rn\n");
	xinfo("--Handling SIP response--\n");

	if(status=~"18[03]") {
        xinfo("--ringing or session in progress--\n");
    }

	if(status=~"[12][0-9][0-9]") {
		route(NATMANAGE);
    }

	if (has_body("application/sdp")) {
		if (route(MSG_RECV_EXTERNAL)) {
			xinfo("rtpe answer from external\n");
			rtpengine_answer("replace-origin replace-session-connection direction=external direction=internal");
		} else {
			xinfo("rtpe answer from internal\n");
			rtpengine_answer("replace-origin replace-session-connection direction=internal direction=external");
		}
	}

	return;
}

onreply_route[1] {
	xinfo("onreply route 1\n");
	if (has_body("application/sdp")) {
		if (route(MSG_RECV_EXTERNAL)) {
			xinfo("rtpe answer from external\n");
			rtpengine_answer("replace-origin replace-session-connection direction=external direction=internal");
		} else {
			xinfo("rtpe answer from internal\n");
			rtpengine_answer("replace-origin replace-session-connection direction=internal direction=external");
		}
	}
}

onreply_route[2] {
	xinfo("onreply route 2\n");
	if (has_body("application/sdp")) {
		if (route(MSG_RECV_EXTERNAL)) {
			xinfo("rtpe offer from external\n");
			rtpengine_offer("replace-origin replace-session-connection direction=internal direction=external");
		} else {
			xinfo("rtpe offer from internal\n");
			rtpengine_offer("replace-origin replace-session-connection direction=external direction=internal");
		}

	}
}

# Manage failure routing cases
failure_route[MANAGE_FAILURE] {
	xinfo("Failure route MANAGE_FAILURE\n");
	xinfo("--MANAGE_FAILURE: $rm FAILED: '$T_reply_code $T_reply_reason' to '$cs $rm' from '$fu' ($si:$sp) [$proto]--\n");
	route(NATMANAGE);

    if (t_is_canceled()) {
        xinfo("--MANAGE_FAILURE: t_is_canceled, exit here\n");
        exit;
    }


#!ifdef WITH_BLOCK3XX
	# block call redirect based on 3xx replies.
	if (t_check_status("3[0-9][0-9]")) {
		t_reply("404","Not found");
		exit;
	}
#!endif

#!ifdef WITH_BLOCK401407
	# block call redirect based on 401, 407 replies.
	if (t_check_status("401|407")) {
		t_reply("404","Not found");
		exit;
	}
#!endif

	return;
}


# Try next destinations in failure route
failure_route[RTF_DISPATCH] {
	xinfo("Failure route RTF_DISPATCH\n");
	if (t_is_canceled()) {
		exit;
	}
	# next DST - only for 500 or local timeout
	if (t_check_status("500")
			or (t_branch_timeout() and !t_branch_replied())) {
		if(ds_next_domain()) {
			xdbg("--- SCRIPT: retrying to <$ru> via <$du> (attrs: $xavp(_dsdst_=>attrs))\n");
			t_on_failure("RTF_DISPATCH");
			if ($(xavp(_dsdst_=>attrs){param.value,tenant}) != "none") {
				append_hf_value("X-Tenant", "$(xavp(_dsdst_=>attrs){param.value,tenant})");
			}
			route(RELAY);
			exit;
		}
	}
}

# Manages RTP Engine
route[RTPE] {
    if (!is_method("INVITE|UPDATE|ACK|BYE|CANCEL")) return;

    if (is_method("ACK") && !has_body("application/sdp")) return;

    $var(common_opts) = 'replace-session-connection replace-origin';

    if (nat_uac_test("18")) {
        xlog("L_INFO", "-- RTPENGINE: NAT detected, do not trust SDP addresses\n");
        $var(symmetry) = 'SIP-source-address';
    } else {
        xlog("L_INFO", "-- RTPENGINE: No NAT detected, trust SDP addresses\n");
        $var(symmetry) = 'trust-address';
    }

    $var(interfaces) = "";

    if(isflagset(FLAG_FROM_CUST)){
        xlog("L_INFO", "-- from IPBX/Customer - engage rtpengine--\n");
        $var(interfaces) = "direction=private direction=public";
    } else {
        xlog("L_INFO", "-- from provider - engage rtpengine--\n");
        $var(interfaces) = "direction=public direction=private";
    }

    $var(wsopts) ='ICE=remove RTP/AVP';
    /* if ($Ri == $sel(cfg_get.address.main) && $dlg_var(extra_socket) != $null) {
        $var(interfaces) = "direction=" + $sel(cfg_get.address.main) + " direction=" + $dlg_var(extra_socket);
    } */

    if (has_body("application/sdp")){
        xlog("L_INFO", "-- RTPENGINE: rtpengine_manage [$var(common_opts) $var(symmetry) $var(wsopts) $var(interfaces)]\n");
        if (is_method("INVITE")) {
            rtpengine_offer("$var(common_opts) $var(symmetry) $var(wsopts) $var(interfaces)");
        } else {
            rtpengine_manage("$var(common_opts) $var(symmetry) $var(wsopts) $var(interfaces)");
        }
    }
}

route[MSG_RECV_INTERNAL] {
    xinfo("Checking if message is on internal leg, Comparing Ri $Ri and Rp $Rp\n");
    if($Rp == 5070) {
        xinfo("is internal\n");
        return 1;
    }
    return -1;
}



route[MSG_RECV_EXTERNAL] {
    xinfo("Checking if message is on external leg SIP, Comparing Ri $Ri and Rp $Rp\n");
    if($Rp == 5060) {
        xinfo("is external\n");
        return 1;
    }
    return -1;
}

event_route[xhttp:request] {
    if ($Rp != "HTTP_PORT") {
        xwarn("HTTP request received on $Rp from $si");
        xhttp_reply("403", "Forbidden", "", "");
        exit;
    }
    $var(x) = $(hu{url.path});
    xinfo("received request [$hu] [$var(x)]");
    if ($hu =~ "^/RPC") {
        xinfo("jsonrpc dispatch [$hu] [$var(x)]");
        jsonrpc_dispatch();
        return;
    }
	else if ($hu == "/status") {
        xhttp_reply("200", "OK", "text/plain", "");
        exit;
    }
    xhttp_reply("404", "Not Found", "application/javascript", "{\"$var(y)\"}\n\r");
    return;
}
